{"version":3,"sources":["main/ui/main-components/Login/Login.module.css","main/ui/main-components/ForgotPassword/ForgotPassword.module.css","main/ui/main-components/Cards/Cards.module.css","main/ui/main-components/Header/Header.module.css","main/ui/main-components/Profile/Profile.module.css","main/ui/common/Input/Input.module.css","main/ui/common/Button/Button.module.css","main/ui/main-components/Register/Register.module.css","main/ui/main-components/Profile/Profile.tsx","main/ui/common/Input/Input.tsx","main/ui/common/Button/Button.tsx","main/dal/api-login.ts","main/bll/login-reducer.ts","main/ui/main-components/Login/Login.tsx","main/dal/api-register.ts","main/bll/register-reducer.ts","main/ui/main-components/Register/Register.tsx","main/dal/api-forgot-password.ts","main/bll/forgot-password-reducer.ts","main/ui/main-components/ForgotPassword/ForgotPassword.tsx","main/dal/api-table-cards.ts","main/bll/packs-reducer.tsx","main/ui/main-components/Table/TablePacks.tsx","main/ui/common/Table/Table.tsx","main/dal/api-get-cards.ts","main/bll/cards-reducer.ts","main/ui/common/Table/EditMenu.tsx","main/ui/main-components/Cards/Cards.tsx","main/ui/main-components/Routes/Routes.tsx","main/ui/main-components/Header/Header.tsx","main/ui/App.tsx","serviceWorker.ts","main/bll/profile-reducer.ts","main/bll/store.ts","index.tsx","main/ui/common/Table/Table.module.css"],"names":["module","exports","Profile","className","styles","profile","Input","React","memo","props","inputContainer","type","placeholder","value","onChange","e","onChangeFunc","currentTarget","Button","button","onClick","onClickFunc","name","instance","axios","create","baseURL","loginApi","userData","post","then","res","data","initialState","email","token","error","isAuth","setIsAuth","loginReducer","state","action","Login","useState","setLogin","password","setPassword","rememberMe","setRememberMe","dispatch","useDispatch","useSelector","store","login","document","cookie","useEffect","onRememberMeChange","useCallback","checked","setData","userLoginData","console","log","success","catch","response","to","apiRegister","NewUser","REGISTER","isAdmin","_id","newUserData","addedUser","alert","registerReducer","Register","setNewEmail","repeatPassword","setRepeatPassword","register","forgotPassApi","resetPassData","forgotPasswordReducer","ForgotPassword","setEmail","forgotPassword","resetSuccess","resetPass","html1","html2","resetPassword","container","apiTableCards","get","cardPacks","packsOfCardsReducer","allPacksCards","MainTable","Packs","packsOfCards","columns","title","dataIndex","key","dataOfPacks","map","c","PACKS_TABLE","created","update","updated","buttons","dataSource","Table","header","m","index","rows","items","item","row","cell","render","getCardsApi","id","cards","cardsReducer","EditMenu","style","display","justifyContent","width","dataItem","question","answer","grade","withRouter","packId","match","params","addButton","CARDS_TABLE","Routes","routes","path","exact","Header","App","Boolean","window","location","hostname","profileReducer","rootReducer","combineReducers","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.883e4c06.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__1NqhM\",\"rememberMe\":\"Login_rememberMe__1lr5L\",\"error\":\"Login_error__14-O5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ForgotPassword_container__26ACj\",\"error\":\"ForgotPassword_error__3xppo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2myC_\",\"addButton\":\"Cards_addButton__37f7W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3xS8R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__3k0ZH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputContainer\":\"Input_inputContainer__2rvjo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3zEY0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"register\":\"Register_register__2no2n\"};","import React from \"react\";\r\nimport Button from \"../../common/Button/Button\";\r\nimport Input from \"../../common/Input/Input\";\r\nimport styles from \"./Profile.module.css\"\r\n\r\nconst Profile = () => {\r\n    return (\r\n        <div className={styles.profile}>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\nimport styles from \"./Input.module.css\";\n\ntype InputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n    & {onChangeFunc: (value: string) => void };\n\nconst Input = React.memo((props: InputPropsType) => {\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n        props.onChangeFunc(e.currentTarget.value);\n    };\n\n    return (\n        <div className={styles.inputContainer}>\n            <input type={props.type} placeholder={props.placeholder} value={props.value} onChange={onChange}/>\n        </div>\n    );\n});\n\nexport default Input;","import React from \"react\";\r\nimport styles from \"./Button.module.css\"\r\n\r\ntype PropsType = {\r\n    name: string;\r\n    onClickFunc: () => void;\r\n};\r\n\r\nconst Button = (props: PropsType) => {\r\n    return (\r\n        <button className={styles.button} onClick={props.onClickFunc}>{props.name}</button>\r\n    )\r\n};\r\n\r\nexport default Button;","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://cards-nya-back.herokuapp.com/1.0/auth\"\r\n});\r\n\r\nexport type UserLoginType = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe: boolean;\r\n};\r\n\r\ntype UserDataResponse = {\r\n    email: string;\r\n    name: string;\r\n    isAdmin: boolean;\r\n    rememberMe: boolean;\r\n    token: string;\r\n    tokenDeathTime: number;\r\n    __v: number;\r\n    _id: string;\r\n    success: boolean;\r\n    error: string;\r\n};\r\n\r\nexport const loginApi = {\r\n    userLogin(userData: UserLoginType) {\r\n        return instance.post<UserDataResponse>(\"/login\", userData).then(res => res.data)\r\n    }\r\n};","import {loginApi, UserLoginType} from \"../dal/api-login\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst USER_LOGIN = \"USER-LOGIN\";\r\nconst SET_ERROR = \"SET-ERROR\";\r\nconst SET_IS_AUTH = \"SET-IS-AUTH\";\r\nconst SET_TOKEN = \"SET-TOKEN\";\r\n\r\nconst initialState = {\r\n    email: \"\",\r\n    name: \"\",\r\n    token: \"\",\r\n    error: \"\",\r\n    isAuth: false\r\n};\r\n\r\ntype initialStateType = typeof initialState;\r\n\r\nconst loginReducer = (state: initialStateType = initialState, action: LoginActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case USER_LOGIN:\r\n            return {...state, ...action.userData};\r\n        case SET_ERROR:\r\n            return {...state, error: action.error};\r\n        case SET_IS_AUTH:\r\n            return {...state, isAuth: action.isAuth};\r\n        case SET_TOKEN:\r\n            return {...state, token: action.token};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype LoginActionType = UserLoginSuccessType | SetErrorType | SetIsAuthType | SetTokenType;\r\n\r\ntype SetTokenType = {type: typeof SET_TOKEN; token: string}\r\nexport const setToken = (token: string) => ({type: SET_TOKEN, token});\r\n\r\ntype UserDataType = {\r\n    email: string;\r\n    name: string;\r\n    token: string;\r\n}\r\ntype UserLoginSuccessType = { type: typeof USER_LOGIN; userData: UserDataType };\r\nconst userLoginSuccess = (userData: UserDataType): UserLoginSuccessType => ({type: USER_LOGIN, userData});\r\n\r\ntype SetErrorType = { type: typeof SET_ERROR; error: string };\r\nconst setError = (error: string): SetErrorType => ({type: SET_ERROR, error});\r\n\r\ntype SetIsAuthType = {type: typeof SET_IS_AUTH; isAuth: boolean};\r\nexport const setIsAuth = (isAuth: boolean): SetIsAuthType => ({type: SET_IS_AUTH, isAuth});\r\n\r\nexport const userLogin = (userLoginData: UserLoginType) => (dispatch: Dispatch<LoginActionType>) => {\r\n    loginApi.userLogin(userLoginData)\r\n        .then(res => {\r\n            if (res.success) {\r\n                dispatch(userLoginSuccess({\r\n                    email: res.email,\r\n                    name: res.name,\r\n                    token: res.token\r\n                }));\r\n                dispatch(setIsAuth(true));\r\n                document.cookie=`token=${res.token}`;\r\n            }\r\n        })\r\n        .catch(res => {\r\n            dispatch(setError(res.response.data.error));\r\n            dispatch(setIsAuth(false));\r\n        })\r\n};\r\n\r\nexport default loginReducer;","import React, {ChangeEvent, useCallback, useEffect, useState} from \"react\";\r\nimport styles from \"./Login.module.css\"\r\nimport Input from \"../../common/Input/Input\";\r\nimport Button from \"../../common/Button/Button\";\r\nimport {setIsAuth, userLogin} from \"../../../bll/login-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../bll/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst Login = () => {\r\n    const [email, setLogin] = useState<string>(\"\");\r\n    const [password, setPassword] = useState<string>(\"\");\r\n    const [rememberMe, setRememberMe] = useState<boolean>(false);\r\n\r\n    const dispatch = useDispatch();\r\n    const error = useSelector((store: AppStateType) => store.login.error);\r\n    const isAuth = useSelector((store: AppStateType) => store.login.isAuth);\r\n\r\n    const token = document.cookie;\r\n    useEffect(\r\n        () => {\r\n            if (token) {\r\n                dispatch(setIsAuth(true));\r\n            }\r\n        }, [token, dispatch]);\r\n\r\n    const onRememberMeChange = useCallback(\r\n        (e: ChangeEvent<HTMLInputElement>) => {\r\n            setRememberMe(e.currentTarget.checked);\r\n        },\r\n        [setRememberMe]\r\n    );\r\n\r\n    const setData = useCallback(\r\n        () => {\r\n            console.log({email, password, rememberMe});\r\n            dispatch(userLogin({email, password, rememberMe}));\r\n        },\r\n        [email, password, rememberMe, dispatch]\r\n    );\r\n\r\n    if (isAuth) return <Redirect to={\"/profile\"}/>;\r\n\r\n    return (\r\n        <div className={styles.login}>\r\n            <div>Sign In</div>\r\n            <Input type={\"email\"} placeholder={\"Login\"} onChangeFunc={setLogin} value={email}/>\r\n            <Input type={\"password\"} placeholder={\"Password\"} onChangeFunc={setPassword} value={password}/>\r\n            {\r\n                error && <span className={styles.error}>{error}</span>\r\n            }\r\n            <div className={styles.rememberMe}>\r\n                <input type={\"checkbox\"} onChange={onRememberMeChange} checked={rememberMe}/>\r\n                <span>remember me</span>\r\n            </div>\r\n            <Button name={\"Login\"} onClickFunc={setData}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import axios from \"axios\";\r\n\r\nconst baseURL = `https://cards-nya-back.herokuapp.com/1.0/`;\r\nconst instance = axios.create({\r\n    baseURL: baseURL\r\n});\r\n\r\nexport type NewUserType = {\r\n    email: string;\r\n    password: string;\r\n}\r\n\r\ntype NewUserResponse = {\r\n    addedUser: {\r\n        email: string,\r\n        isAdmin: boolean,\r\n        __v: number,\r\n        _id: string\r\n    },\r\n    success: true\r\n}\r\n\r\nexport const apiRegister = {\r\n    addNewUser(NewUser: NewUserType) {\r\n        return instance.post<NewUserResponse>(`auth/register`, NewUser)\r\n    }\r\n};\r\n","import {Dispatch} from \"redux\";\r\nimport {apiRegister, NewUserType} from \"../dal/api-register\";\r\n\r\nconst REGISTER = \"cards-nya/auth/REGISTER\";\r\n\r\nconst initialState = {\r\n    email: \"\",\r\n    isAdmin: false,\r\n    // __v: 1,\r\n    _id: \"\"\r\n};\r\n\r\ntype initialStateType = typeof initialState;\r\ntype addNewUserType = { type: string; addedUser: initialStateType };\r\n\r\nconst registerReducer = (state: initialStateType = initialState, action: addNewUserType): initialStateType => {\r\n    switch (action.type) {\r\n        case REGISTER: {\r\n            return {...state, ...action.addedUser}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\nconst addNewUser = (addedUser: initialStateType): addNewUserType => ({type: REGISTER, addedUser});\r\n\r\nexport const NewUser = (newUserData: NewUserType) => (dispatch: Dispatch<addNewUserType>) => {\r\n     apiRegister.addNewUser(newUserData)\r\n        .then(res => {\r\n            if (res.data.success === true) {\r\n                dispatch(addNewUser(res.data.addedUser))\r\n            } else {\r\n                alert(\"some error\")\r\n            }\r\n        })\r\n        .catch(res => {\r\n            alert(\"error\")\r\n        })\r\n};\r\nexport default registerReducer;","import React, {useState} from \"react\";\r\nimport styles from \"./Register.module.css\"\r\nimport Input from \"../../common/Input/Input\";\r\nimport Button from \"../../common/Button/Button\";\r\nimport {NewUser} from \"../../../bll/register-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\nconst Register = () => {\r\n\r\n    const [email, setNewEmail] = useState<string>(\"\");\r\n\r\n    const [password, setPassword] = useState<string>(\"\");\r\n\r\n    const [repeatPassword, setRepeatPassword] = useState<string>(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const setNewUserData = (): void => {\r\n        if (password === repeatPassword) {\r\n            dispatch(NewUser({email, password}));\r\n            setNewEmail(\"\");\r\n            setPassword(\"\");\r\n            setRepeatPassword(\"\")\r\n        } else {\r\n            alert(\"Пароли не совпадают\")\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={styles.register}>\r\n            <Input type={\"text\"} placeholder={\"e-mail\"} value={email} onChangeFunc={setNewEmail}/>\r\n            <Input type={\"password\"} placeholder={\"Password\"} value={password} onChangeFunc={setPassword}/>\r\n            <Input type={\"password\"} placeholder={\"Repeat password\"} value={repeatPassword}\r\n                   onChangeFunc={setRepeatPassword}/>\r\n            <Button name={\"Register\"} onClickFunc={setNewUserData}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://cards-nya-back.herokuapp.com/1.0/auth\"\r\n});\r\n\r\nexport type ResetPassType = {\r\n    email: string;\r\n    html1: string;\r\n    html2: string;\r\n};\r\n\r\nexport const forgotPassApi = {\r\n    resetPass(resetPassData: ResetPassType) {\r\n        return instance.post<{success: boolean}>(\"/forgot\", resetPassData).then(res => res.data)\r\n    }\r\n};","import {Dispatch} from \"redux\";\r\nimport {forgotPassApi} from \"../dal/api-forgot-password\";\r\n\r\nconst RESET_PASSWORD = \"USER-LOGIN\";\r\nconst SET_ERROR = \"SET-ERROR\";\r\n\r\nconst initialState = {\r\n    success: false,\r\n    error: \"\"\r\n};\r\n\r\ntype initialStateType = typeof initialState;\r\n\r\nconst forgotPasswordReducer = (state: initialStateType = initialState, action: ForgotPasswordActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case RESET_PASSWORD:\r\n            return {...state, success: action.success};\r\n        case SET_ERROR:\r\n            return {...state, error: action.error};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype ForgotPasswordActionType = ResetPasswordSuccessType | SetErrorType;\r\n\r\ntype ResetPasswordSuccessType = { type: typeof RESET_PASSWORD; success: boolean };\r\nconst resetPasswordSuccess = (success: boolean): ResetPasswordSuccessType => ({type: RESET_PASSWORD, success});\r\n\r\ntype SetErrorType = { type: typeof SET_ERROR; error: string };\r\nconst setError = (error: string): SetErrorType => ({type: SET_ERROR, error});\r\n\r\nexport const resetPassword = (email: string) => (dispatch: Dispatch<ForgotPasswordActionType>) => {\r\n    const resPassData = {\r\n        email,\r\n        html1: \"<a href='http://localhost:3000/cards-nya#/forgot-password/'\",\r\n        html2: \">reset-password</a>\"\r\n    };\r\n    forgotPassApi.resetPass(resPassData)\r\n        .then(res => {\r\n            if (res.success) {\r\n                dispatch(resetPasswordSuccess(res.success));\r\n            }\r\n        })\r\n        .catch(res => {\r\n            dispatch(setError(res.response.data.error));\r\n        })\r\n};\r\n\r\nexport default forgotPasswordReducer;","import React, {useCallback, useState} from \"react\";\r\nimport styles from \"./ForgotPassword.module.css\"\r\nimport Input from \"../../common/Input/Input\";\r\nimport Button from \"../../common/Button/Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {resetPassword} from \"../../../bll/forgot-password-reducer\";\r\nimport {AppStateType} from \"../../../bll/store\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst ForgotPassword = () => {\r\n    const [email, setEmail] = useState<string>(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n    const error = useSelector((store: AppStateType) => store.forgotPassword.error);\r\n    const resetSuccess = useSelector((store: AppStateType) => store.forgotPassword.success);\r\n\r\n    const resetPass = useCallback(\r\n        () => {\r\n            dispatch(resetPassword(email))\r\n        }, [email, dispatch]\r\n    );\r\n\r\n    if (resetSuccess) return <Redirect to={\"/set-new-password\"}/>;\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div>Forgot Password</div>\r\n            <Input onChangeFunc={setEmail} value={email} type={\"email\"} placeholder={\"your e-mail\"}/>\r\n            {\r\n                error && <span className={styles.error}>{error}</span>\r\n            }\r\n            <Button name={\"Send\"} onClickFunc={resetPass}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ForgotPassword;\r\n","import axios from \"axios\";\r\n\r\nconst baseURL = `https://cards-nya-back.herokuapp.com/1.0/`;\r\nconst instance = axios.create({\r\n    baseURL: baseURL\r\n});\r\n\r\nexport type Pack = {\r\n    _id: string\r\n    user_id: string\r\n    name: string\r\n    path: string\r\n    grade: number\r\n    shots: number\r\n    rating: number\r\n    type: string\r\n    created: string\r\n    updated: string\r\n    __v: 0\r\n}\r\n\r\nexport  type ResponsePacks = {\r\n    cardPacks: Array<Pack>\r\n    cardPacksTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\nexport const apiTableCards = {\r\n    loadingCardsPack() {\r\n        return instance.get<ResponsePacks>(`cards/pack?${document.cookie}&pageCount=30`)\r\n    }\r\n};\r\n","import {apiTableCards, Pack} from \"../dal/api-table-cards\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst LOADING_PACKS_OF_CARDS = \"cards-nya/auth/LOADING_PACKS_OF_CARDS\";\r\n\r\n\r\n\r\nconst initialState = {\r\n    cardPacks: [\r\n        // {\r\n        //     _id: \"333\",\r\n        //     user_id: \"5eb543f6bea3ad21480f1ee7\",\r\n        //     name: \"no Name\",\r\n        //     path: \"/def\", // папка\r\n        //     grade: 0, // средняя оценка карточек\r\n        //     shots: 0,// количество попыток\r\n        //     rating: 0, // лайки\r\n        //     type: \"pack\",// ещё будет \"folder\" (папка)\r\n        //     created: \"2020-05-09T15:40:40.339Z\",\r\n        //     updated: \"2020-05-09T15:40:40.339B\",\r\n        //     __v: 0\r\n        // },\r\n        // {\r\n        //     _id: \"334\",\r\n        //     user_id: \"5eb543f6bea3ad21480f1ee7\",\r\n        //     name: \"no Name\",\r\n        //     path: \"/def\", // папка\r\n        //     grade: 0, // средняя оценка карточек\r\n        //     shots: 0,// количество попыток\r\n        //     rating: 0, // лайки\r\n        //     type: \"pack\",// ещё будет \"folder\" (папка)\r\n        //     created: \"2020-05-09T15:40:40.339Z\",\r\n        //     updated: \"2020-05-09T15:40:40.339A\",\r\n        //     __v: 0\r\n        // }\r\n    ] as Array<Pack>\r\n    // cardPacksTotalCount: 14, // количество колод\r\n    // maxGrade: 4.824320858778307,\r\n    // minGrade: 0,\r\n    // page: 1, // выбранная страница\r\n    // pageCount: 4 ,// количество элементов на странице\r\n    // token: \"572e99e0-9439-11ea-a15d-c9ae497710ee\",\r\n    // tokenDeathTime: 1589289258495\r\n};\r\ntype initialStateType = typeof initialState;\r\n\r\nconst packsOfCardsReducer = (state: initialStateType = initialState, action:loadingTableCards) => {\r\n    switch (action.type) {\r\n        case LOADING_PACKS_OF_CARDS: {\r\n            return {\r\n                ...state,\r\n                cardPacks: action.allPacksCards\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype loadingTableCards ={\r\n   type:string\r\n    allPacksCards: Array<Pack>\r\n}\r\n\r\nconst loadingTableCardsAC = (allPacksCards:Array<Pack>): loadingTableCards => ({type: LOADING_PACKS_OF_CARDS, allPacksCards});\r\n\r\nexport const LoadingPacksCards = () => (dispatch:Dispatch) => {\r\n    return apiTableCards.loadingCardsPack()\r\n        .then(res => {\r\n            dispatch(loadingTableCardsAC(res.data.cardPacks));\r\n            document.cookie = `token=${res.data.token}`;\r\n        })\r\n};\r\nexport default packsOfCardsReducer;","import React, {useEffect} from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport {Table} from 'antd';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {LoadingPacksCards} from \"../../../bll/packs-reducer\";\r\nimport { Pack } from '../../../dal/api-table-cards';\r\nimport {AppStateType} from \"../../../bll/store\";\r\nimport { NavLink } from 'react-router-dom';\r\nimport {PACKS_TABLE} from \"../Routes/Routes\";\r\n\r\n\r\nconst MainTable = () => {\r\n\r\n    const Packs =  useSelector((store:AppStateType)=> store.packsOfCards.cardPacks);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(\r\n        () => {\r\n            dispatch(LoadingPacksCards())\r\n        }, []\r\n    );\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n        },\r\n        {\r\n            title: 'Created',\r\n            dataIndex: 'created',\r\n        },\r\n        {\r\n            title: 'Updated',\r\n            dataIndex: 'update',\r\n        },\r\n        {\r\n            title: <button>ADD</button>,\r\n            dataIndex: 'buttons',\r\n        },\r\n    ];\r\n\r\n    const dataOfPacks = Packs.map((c:Pack) => {\r\n        return {\r\n            key: c._id,\r\n            name: <NavLink to={`${PACKS_TABLE}/cards/${c._id}`}>{c.name}</NavLink>,\r\n            created: c.created,\r\n            update: c.updated,\r\n            buttons: <div>\r\n                <button>update</button>\r\n                <button>delete</button>\r\n                </div>\r\n        }\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <Table columns={columns} dataSource={dataOfPacks}/>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default MainTable;\r\n\r\n\r\n","import React, {ReactNode} from \"react\";\r\nimport styles from \"./Table.module.css\"\r\nimport {CardType} from \"../../../dal/api-get-cards\";\r\n\r\nexport type TableModelType = {\r\n    title: string;\r\n    render: (dataItem: CardType) => ReactNode;\r\n};\r\n\r\ntype TablePropsType = {\r\n    columns: Array<TableModelType>;\r\n    items: Array<CardType>;\r\n};\r\n\r\nconst Table = (props: TablePropsType) => {\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.header}>\r\n                {props.columns.map((m, index) => <div key={index}>{m.title}</div>)}\r\n            </div>\r\n            <div className={styles.rows}>\r\n                {props.items.map((item) => {\r\n                    return <div key={item._id} className={styles.row}>\r\n                        {props.columns.map((m, index) => {\r\n                            return (\r\n                                <div key={index} className={styles.cell}>\r\n                                    {m.render(item)}\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Table;","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://cards-nya-back.herokuapp.com/1.0\"\r\n});\r\n\r\nexport type CardType = {\r\n    answer: string;\r\n    question: string;\r\n    cardsPack_id: string;\r\n    grade: number;\r\n    rating: number;\r\n    shots: number;\r\n    type: string;\r\n    created: string;\r\n    updated: string;\r\n    __v: number;\r\n    _id: string;\r\n}\r\n\r\ntype CardsResponseType = {\r\n    cards: Array<CardType>;\r\n    cardsTotalCount: number;\r\n    maxGrade: number;\r\n    minGrade: number;\r\n    page: number;\r\n    pageCount: number;\r\n    token: string;\r\n    tokenDeathTime: number;\r\n}\r\n\r\nexport const getCardsApi = {\r\n    getCards(id: string) {\r\n        return instance.get<CardsResponseType>(`/cards/card?cardsPack_id=${id}&${document.cookie}`).then(res => res.data)\r\n    }\r\n};","import {Dispatch} from \"redux\";\r\nimport {CardType, getCardsApi} from \"../dal/api-get-cards\";\r\n\r\nconst GET_CARDS = \"GET-CARDS\";\r\n\r\nconst initialState = {\r\n    cards: []\r\n};\r\n\r\ntype initialStateType = {\r\n    cards: Array<CardType>;\r\n};\r\n\r\nconst cardsReducer = (state: initialStateType = initialState, action: CardsActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case GET_CARDS:\r\n            return {...state, cards: action.cards};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype CardsActionType = GetCardsSuccessType;\r\n\r\ntype GetCardsSuccessType = { type: typeof GET_CARDS; cards: Array<CardType> }\r\nexport const getCardsSuccess = (cards: Array<CardType>): GetCardsSuccessType => ({type: GET_CARDS, cards});\r\n\r\nexport const getCards = (id: string) => (dispatch: Dispatch<GetCardsSuccessType>) => {\r\n    getCardsApi.getCards(id)\r\n        .then(res => {\r\n            dispatch(getCardsSuccess(res.cards));\r\n            document.cookie = `token=${res.token}`;\r\n        })\r\n        .catch(res => {\r\n            console.log(res);\r\n        })\r\n};\r\n\r\nexport default cardsReducer;","import Button from \"../Button/Button\";\r\nimport React from \"react\";\r\n\r\ntype EditMenuPropsType = {\r\n    id: string;\r\n};\r\n\r\nexport const EditMenu = (props: EditMenuPropsType) => {\r\n    return (\r\n        <div style={{display: \"flex\", justifyContent: \"space-around\", width: \"100%\"}}>\r\n            <Button name={\"update\"} onClickFunc={() => {}}/>\r\n            <Button name={\"delete\"} onClickFunc={() => {}}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default EditMenu;","import React, {useEffect} from \"react\";\r\nimport Table, {TableModelType} from \"../../common/Table/Table\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../bll/store\";\r\nimport {CardType} from \"../../../dal/api-get-cards\";\r\nimport {getCards} from \"../../../bll/cards-reducer\";\r\nimport Button from \"../../common/Button/Button\";\r\nimport styles from \"./Cards.module.css\"\r\nimport EditMenu from \"../../common/Table/EditMenu\";\r\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\r\n\r\nlet columns: Array<TableModelType> = [\r\n    {\r\n        title: \"Question\",\r\n        render(dataItem: CardType) {\r\n            return <span>{dataItem.question}</span>\r\n        }\r\n    },\r\n    {\r\n        title: \"Answer\",\r\n        render(dataItem: CardType) {\r\n            return <span>{dataItem.answer}</span>\r\n        }\r\n    },\r\n    {\r\n        title: \"Grade\",\r\n        render(dataItem: CardType) {\r\n            return <span>{dataItem.grade}</span>\r\n        },\r\n    },\r\n    {\r\n        title: \"Edit\",\r\n        render(dataItem: CardType) {\r\n            return <EditMenu id={dataItem._id}/>\r\n        },\r\n    }\r\n];\r\n\r\ntype PackIdType = {\r\n    packId: string;\r\n};\r\ntype CardsPropsType = RouteComponentProps<PackIdType>;\r\n\r\nconst Cards = (props: CardsPropsType) => {\r\n    const cards = useSelector((state: AppStateType) => state.cards.cards);\r\n    const packId = props.match.params.packId;\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getCards(packId));\r\n    }, [packId, dispatch]);\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.addButton}>\r\n                <Button name={\"Add Card\"} onClickFunc={() => {\r\n                }}/>\r\n            </div>\r\n            <Table columns={columns} items={cards}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default withRouter(Cards);","import React from \"react\";\r\nimport {Route} from \"react-router-dom\";\r\nimport styles from \"./Routes.module.css\"\r\nimport Profile from \"../Profile/Profile\";\r\nimport Login from \"../Login/Login\";\r\nimport Register from \"../Register/Register\";\r\nimport ForgotPassword from \"../ForgotPassword/ForgotPassword\";\r\nimport MainTable from \"../Table/TablePacks\";\r\nimport Cards from \"../Cards/Cards\";\r\n\r\nexport const PROFILE_PATH = \"/profile\";\r\nexport const LOGIN_PATH = \"/login\";\r\nexport const REGISTER_PATH = \"/register\";\r\nexport const FORGOT_PASSWORD_PATH = \"/forgot-password\";\r\nexport const PACKS_TABLE = \"/packs-table\";\r\nexport const CARDS_TABLE = `${PACKS_TABLE}/cards/:packId?`;\r\n\r\nconst Routes = () => {\r\n\r\n    return (\r\n        <div className={styles.routes}>\r\n            <Route path={PROFILE_PATH} render={() => <Profile/>}/>\r\n            <Route path={LOGIN_PATH} render={() => <Login/>}/>\r\n            <Route path={REGISTER_PATH} render={() => <Register/>}/>\r\n            <Route path={FORGOT_PASSWORD_PATH} render={() => <ForgotPassword/>}/>\r\n            <Route exact path={PACKS_TABLE} render={() => <MainTable/>}/>\r\n            <Route path={CARDS_TABLE} render={() => <Cards/>}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport styles from \"./Header.module.css\"\r\nimport {PACKS_TABLE, FORGOT_PASSWORD_PATH, LOGIN_PATH, PROFILE_PATH, REGISTER_PATH} from \"../Routes/Routes\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className={styles.header}>\r\n            <NavLink to={PROFILE_PATH}>Profile</NavLink>\r\n            <NavLink to={LOGIN_PATH}>Login</NavLink>\r\n            <NavLink to={REGISTER_PATH}>Register</NavLink>\r\n            <NavLink to={FORGOT_PASSWORD_PATH}>Forgot Password</NavLink>\r\n            <NavLink to={PACKS_TABLE}>Cards Table</NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./main-components/Header/Header\";\nimport Routes from \"./main-components/Routes/Routes\";\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <Header/>\n            <Routes/>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this columns and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","\r\nconst initialState = {};\r\n\r\ntype initialStateType = typeof initialState;\r\n\r\nconst profileReducer = (state: initialStateType = initialState, action: any): initialStateType => {\r\n    switch (action.type) {\r\n\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default profileReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport profileReducer from \"./profile-reducer\";\nimport loginReducer from \"./login-reducer\";\nimport registerReducer from \"./register-reducer\";\nimport forgotPasswordReducer from \"./forgot-password-reducer\";\nimport packsOfCardsReducer from \"./packs-reducer\";\nimport cardsReducer from \"./cards-reducer\";\n\nconst rootReducer = combineReducers({\n    profile: profileReducer,\n    login: loginReducer,\n    register: registerReducer,\n    forgotPassword: forgotPasswordReducer,\n    packsOfCards: packsOfCardsReducer,\n    cards: cardsReducer\n});\n\ntype RootReducerType = typeof rootReducer;\nexport type AppStateType = ReturnType<RootReducerType>;\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './main/ui/App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport { Provider } from 'react-redux';\nimport store from './main/bll/store';\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <React.StrictMode>\n                <App/>\n            </React.StrictMode>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Table_container__1ZrIg\",\"header\":\"Table_header__2qWCm\",\"rows\":\"Table_rows__3b0vG\",\"row\":\"Table_row__3oxbf\",\"cell\":\"Table_cell__2QXtC\"};"],"sourceRoot":""}