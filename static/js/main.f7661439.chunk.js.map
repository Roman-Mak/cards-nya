{"version":3,"sources":["main/ui/main-components/Header/Header.module.css","main/ui/common/Button/Button.module.css","main/ui/common/Input/Input.module.css","main/ui/main-components/Profile/Profile.module.css","main/ui/common/Button/Button.tsx","main/ui/common/Input/Input.tsx","main/ui/main-components/Profile/Profile.tsx","main/ui/main-components/Login/Login.tsx","main/ui/main-components/Register/Register.tsx","main/ui/main-components/Routes/Routes.tsx","main/ui/main-components/Header/Header.tsx","main/ui/App.tsx","serviceWorker.ts","main/bll/profile-reducer.ts","main/bll/login-reducer.ts","main/bll/register-reducer.ts","main/bll/store.ts","index.tsx"],"names":["module","exports","Button","props","className","styles","button","onClick","onClickFunc","name","Input","inputContainer","type","placeholder","Profile","profile","Login","Register","Routes","path","render","Header","header","to","App","Boolean","window","location","hostname","match","initialState","profileReducer","state","action","loginReducer","registerReducer","rootReducer","combineReducers","login","register","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,OAAS,yB,mBCA3BD,EAAOC,QAAU,CAAC,OAAS,yB,mBCA3BD,EAAOC,QAAU,CAAC,eAAiB,gC,mBCAnCD,EAAOC,QAAU,CAAC,QAAU,2B,uNCabC,EANA,SAACC,GACZ,OACI,4BAAQC,UAAWC,IAAOC,OAAQC,QAASJ,EAAMK,aAAcL,EAAMM,O,iBCI9DC,EAVD,SAACP,GAEX,OACI,yBAAKC,UAAWC,IAAOM,gBACnB,2BAAOC,KAAMT,EAAMS,KAAMC,YAAaV,EAAMU,cAC5C,kBAAC,EAAD,CAAQJ,KAAM,OAAQD,YAAa,iB,iBCKhCM,EATC,WACZ,OACI,yBAAKV,UAAWC,IAAOU,SACnB,kBAAC,EAAD,CAAQN,KAAM,OAAQD,YAAa,eACnC,kBAAC,EAAD,CAAOI,KAAM,OAAQC,YAAa,mBCC/BG,EARD,WACV,OACI,yBAAKZ,UAAU,WCMRa,EARE,WACb,OACI,yBAAKb,UAAU,cCgBRc,EAVA,WACX,OACI,yBAAKd,UAAU,UACX,kBAAC,IAAD,CAAOe,KAPS,WAOWC,OAAQ,kBAAM,kBAAC,EAAD,SACzC,kBAAC,IAAD,CAAOD,KAPO,SAOWC,OAAQ,kBAAM,kBAAC,EAAD,SACvC,kBAAC,IAAD,CAAOD,KAPU,YAOWC,OAAQ,kBAAM,kBAAC,EAAD,WCAvCC,EAVA,WACX,OACI,yBAAKjB,UAAWC,IAAOiB,QACnB,kBAAC,IAAD,CAASC,GDFO,YCEhB,WACA,kBAAC,IAAD,CAASA,GDFK,UCEd,SACA,kBAAC,IAAD,CAASA,GDFQ,aCEjB,cCIGC,EATH,WACR,OACI,yBAAKpB,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGQqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2BCjBAC,EAAe,GAWNC,EAPQ,WAA4E,IAA3EC,EAA0E,uDAAhDF,EAAcG,EAAkC,uCAI9F,OAHQA,EAAOrB,KAGRoB,GCRLF,EAAe,GAWNI,EAPM,WAA4E,IAA3EF,EAA0E,uDAAhDF,EAAcG,EAAkC,uCAI5F,OAHQA,EAAOrB,KAGRoB,GCRLF,EAAe,GAWNK,EAPS,WAA2E,IAA1EH,EAAyE,uDAA/CF,EAAcG,EAAiC,uCAI9F,OAHQA,EAAOrB,KAGRoB,GCHLI,EAAcC,YAAgB,CAChCtB,QAASgB,EACTO,MAAOJ,EACPK,SAAUJ,IAQCK,EAFDC,YAAYL,EAAaM,YAAgBC,MCNvDC,IAASxB,OACL,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUoB,MAAOA,GACb,kBAAC,IAAMK,WAAP,KACI,kBAAC,EAAD,SAIZC,SAASC,eAAe,SL0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f7661439.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3xS8R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3zEY0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputContainer\":\"Input_inputContainer__2rvjo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__3k0ZH\"};","import React from \"react\";\r\nimport styles from \"./Button.module.css\"\r\n\r\ntype PropsType = {\r\n    name: string;\r\n    onClickFunc: () => void;\r\n}\r\n\r\nconst Button = (props: PropsType) => {\r\n    return (\r\n        <button className={styles.button} onClick={props.onClickFunc}>{props.name}</button>\r\n    )\r\n};\r\n\r\nexport default Button;","import React from \"react\";\r\nimport Button from \"../Button/Button\";\r\nimport styles from \"./Input.module.css\"\r\n\r\nconst Input = (props: any) => {\r\n\r\n    return (\r\n        <div className={styles.inputContainer}>\r\n            <input type={props.type} placeholder={props.placeholder}/>\r\n            <Button name={\"Test\"} onClickFunc={() => {}}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Input;","import React from \"react\";\r\nimport Button from \"../../common/Button/Button\";\r\nimport Input from \"../../common/Input/Input\";\r\nimport styles from \"./Profile.module.css\"\r\n\r\nconst Profile = () => {\r\n    return (\r\n        <div className={styles.profile}>\r\n            <Button name={\"Test\"} onClickFunc={() => {}}/>\r\n            <Input type={\"text\"} placeholder={\"Test message\"}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\n\r\nconst Login = () => {\r\n    return (\r\n        <div className=\"login\">\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\n\r\nconst Register = () => {\r\n    return (\r\n        <div className=\"register\">\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n","import React from \"react\";\r\nimport {Route} from \"react-router-dom\";\r\nimport Profile from \"../Profile/Profile\";\r\nimport Login from \"../Login/Login\";\r\nimport Register from \"../Register/Register\";\r\n\r\nexport const PROFILE_PATH = \"/profile\";\r\nexport const LOGIN_PATH = \"/login\";\r\nexport const REGISTER_PATH = \"/register\";\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <div className=\"Routes\">\r\n            <Route path={PROFILE_PATH} render={() => <Profile/>}/>\r\n            <Route path={LOGIN_PATH} render={() => <Login/>}/>\r\n            <Route path={REGISTER_PATH} render={() => <Register/>}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport styles from \"./Header.module.css\"\r\nimport {LOGIN_PATH, PROFILE_PATH, REGISTER_PATH} from \"../Routes/Routes\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className={styles.header}>\r\n            <NavLink to={PROFILE_PATH}>Profile</NavLink>\r\n            <NavLink to={LOGIN_PATH}>Login</NavLink>\r\n            <NavLink to={REGISTER_PATH}>Register</NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./main-components/Header/Header\";\nimport Routes from \"./main-components/Routes/Routes\";\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <Header/>\n            <Routes/>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nconst initialState = {};\r\n\r\ntype initialStateType = typeof initialState;\r\n\r\nconst profileReducer = (state: initialStateType = initialState, action: any): initialStateType => {\r\n    switch (action.type) {\r\n\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default profileReducer;","\r\nconst initialState = {};\r\n\r\ntype initialStateType = typeof initialState;\r\n\r\nconst loginReducer = (state: initialStateType = initialState, action: any): initialStateType => {\r\n    switch (action.type) {\r\n\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default loginReducer;","\r\nconst initialState = {};\r\n\r\ntype initialStateType = typeof initialState;\r\n\r\nconst registerReducer = (state: initialStateType = initialState, action:any): initialStateType => {\r\n    switch (action.type) {\r\n\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default registerReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport loginReducer from \"./login-reducer\";\r\nimport registerReducer from \"./register-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    profile: profileReducer,\r\n    login: loginReducer,\r\n    register: registerReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './main/ui/App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport { Provider } from 'react-redux';\nimport store from './main/bll/store';\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <React.StrictMode>\n                <App/>\n            </React.StrictMode>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}