{"version":3,"sources":["main/ui/main-components/Login/Login.module.css","main/ui/main-components/ForgotPassword/ForgotPassword.module.css","main/ui/main-components/Header/Header.module.css","main/ui/main-components/Profile/Profile.module.css","main/ui/common/Input/Input.module.css","main/ui/common/Button/Button.module.css","main/ui/main-components/Register/Register.module.css","main/ui/main-components/Profile/Profile.tsx","main/ui/common/Input/Input.tsx","main/ui/common/Button/Button.tsx","main/dal/api-login.ts","main/bll/login-reducer.ts","main/ui/main-components/Login/Login.tsx","main/dal/api-register.ts","main/bll/register-reducer.ts","main/ui/main-components/Register/Register.tsx","main/dal/api-forgot-password.ts","main/bll/forgot-password-reducer.ts","main/ui/main-components/ForgotPassword/ForgotPassword.tsx","main/ui/main-components/Routes/Routes.tsx","main/ui/main-components/Header/Header.tsx","main/ui/App.tsx","serviceWorker.ts","main/bll/profile-reducer.ts","main/bll/store.ts","index.tsx"],"names":["module","exports","Profile","className","styles","profile","Input","React","memo","props","inputContainer","type","placeholder","value","onChange","e","onChangeFunc","currentTarget","Button","button","onClick","onClickFunc","name","instance","axios","create","baseURL","loginApi","userData","post","then","res","data","initialState","email","token","error","isAuth","setIsAuth","loginReducer","state","action","Login","useState","setLogin","password","setPassword","rememberMe","setRememberMe","dispatch","useDispatch","useSelector","store","login","onRememberMeChange","useCallback","checked","setData","userLoginData","console","log","success","catch","response","to","apiRegister","NewUser","REGISTER","isAdmin","__v","_id","newUserData","addedUser","alert","registerReducer","Register","setNewEmail","repeatPassword","setRepeatPassword","register","forgotPassApi","resetPassData","forgotPasswordReducer","ForgotPassword","setEmail","forgotPassword","resetSuccess","resetPass","html1","html2","resetPassword","container","Routes","routes","path","render","Header","header","App","Boolean","window","location","hostname","match","profileReducer","rootReducer","combineReducers","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,WAAa,0BAA0B,MAAQ,uB,mBCA9FD,EAAOC,QAAU,CAAC,UAAY,kCAAkC,MAAQ,gC,mBCAxED,EAAOC,QAAU,CAAC,OAAS,yB,wCCA3BD,EAAOC,QAAU,CAAC,QAAU,2B,mBCA5BD,EAAOC,QAAU,CAAC,eAAiB,gC,mBCAnCD,EAAOC,QAAU,CAAC,OAAS,yB,mBCA3BD,EAAOC,QAAU,CAAC,SAAW,6B,yOCYdC,EARC,WACZ,OACI,yBAAKC,UAAWC,IAAOC,W,yCCWhBC,EAZDC,IAAMC,MAAK,SAACC,GAKtB,OACI,yBAAKN,UAAWC,IAAOM,gBACnB,2BAAOC,KAAMF,EAAME,KAAMC,YAAaH,EAAMG,YAAaC,MAAOJ,EAAMI,MAAOC,SANpE,SAACC,GACdN,EAAMO,aAAaD,EAAEE,cAAcJ,c,iBCM5BK,EANA,SAACT,GACZ,OACI,4BAAQN,UAAWC,IAAOe,OAAQC,QAASX,EAAMY,aAAcZ,EAAMa,O,wBCRvEC,EAAWC,IAAMC,OAAO,CAC1BC,QAAS,kDAsBAC,EAAW,SACVC,GACN,OAAOL,EAASM,KAAuB,SAAUD,GAAUE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SCpB7EC,EAAe,CACjBC,MAAO,GACPZ,KAAM,GACNa,MAAO,GACPC,MAAO,GACPC,QAAQ,GAgCNC,EAAY,SAACD,GAAD,MAAqC,CAAC1B,KAvCpC,cAuCuD0B,WAoB5DE,EA/CM,WAAwF,IAAvFC,EAAsF,uDAA5DP,EAAcQ,EAA8C,uCACxG,OAAQA,EAAO9B,MACX,IAhBW,aAiBP,OAAO,eAAI6B,EAAX,GAAqBC,EAAOb,UAChC,IAjBU,YAkBN,OAAO,eAAIY,EAAX,CAAkBJ,MAAOK,EAAOL,QACpC,IAlBY,cAmBR,OAAO,eAAII,EAAX,CAAkBH,OAAQI,EAAOJ,SACrC,QACI,OAAOG,I,OC0BJE,EA3CD,WAAO,IAAD,EACUC,mBAAiB,IAD3B,mBACTT,EADS,KACFU,EADE,OAEgBD,mBAAiB,IAFjC,mBAETE,EAFS,KAECC,EAFD,OAGoBH,oBAAkB,GAHtC,mBAGTI,EAHS,KAGGC,EAHH,KAKVC,EAAWC,cACXd,EAAQe,aAAY,SAACC,GAAD,OAAyBA,EAAMC,MAAMjB,SACzDC,EAASc,aAAY,SAACC,GAAD,OAAyBA,EAAMC,MAAMhB,UAE1DiB,EAAqBC,uBACvB,SAACxC,GACGiC,EAAcjC,EAAEE,cAAcuC,WAElC,CAACR,IAGCS,EAAUF,uBACZ,WDoBiB,IAACG,ECnBdC,QAAQC,IAAI,CAAC1B,QAAOW,WAAUE,eAC9BE,GDkBcS,EClBK,CAACxB,QAAOW,WAAUE,cDkBU,SAACE,GACxDtB,EAAmB+B,GACd5B,MAAK,SAAAC,GACEA,EAAI8B,UACJZ,EAZ4D,CAACtC,KAnC1D,aAmC4EiB,SAYrD,CACtBM,MAAOH,EAAIG,MACXZ,KAAMS,EAAIT,KACVa,MAAOJ,EAAII,SAEfc,EAASX,GAAU,QAG1BwB,OAAM,SAAA/B,GACHkB,EAlBuC,CAACtC,KArClC,YAqCmDyB,MAkBvCL,EAAIgC,SAAS/B,KAAKI,QACpCa,EAASX,GAAU,YC9BvB,CAACJ,EAAOW,EAAUE,EAAYE,IAGlC,OAAIZ,EAAe,kBAAC,IAAD,CAAU2B,GAAI,aAG7B,yBAAK7D,UAAWC,IAAOiD,OACnB,wCACA,kBAAC,EAAD,CAAO1C,KAAM,QAASC,YAAa,QAASI,aAAc4B,EAAU/B,MAAOqB,IAC3E,kBAAC,EAAD,CAAOvB,KAAM,WAAYC,YAAa,WAAYI,aAAc8B,EAAajC,MAAOgC,IAEhFT,GAAS,0BAAMjC,UAAWC,IAAOgC,OAAQA,GAE7C,yBAAKjC,UAAWC,IAAO2C,YACnB,2BAAOpC,KAAM,WAAYG,SAAUwC,EAAoBE,QAAST,IAChE,8CAEJ,kBAAC,EAAD,CAAQzB,KAAM,QAASD,YAAaoC,M,iBC5C1ClC,EAAWC,IAAMC,OAAO,CAC1BC,QAFS,8CAoBAuC,EAAc,SACZC,GACP,OAAO3C,EAASM,KAAT,gBAAgDqC,ICpBzDC,EAAW,0BAEXlC,EAAe,CACjBC,MAAO,GACPkC,SAAS,EACTC,IAAK,EACLC,IAAK,IAkBIJ,EAAU,SAACK,GAAD,OAA8B,SAACtB,GAClDgB,EAAuBM,GAClBzC,MAAK,SAAAC,GAJK,IAACyC,GAKiB,IAArBzC,EAAIC,KAAK6B,QACTZ,GANIuB,EAMgBzC,EAAIC,KAAKwC,UANwB,CAAC7D,KAAMwD,EAAUK,eAQtEC,MAAM,iBAGbX,OAAM,SAAA/B,GACH0C,MAAM,cAGHC,EAzBS,WAAuF,IAAtFlC,EAAqF,uDAA3DP,EAAcQ,EAA6C,uCAC1G,OAAQA,EAAO9B,MACX,KAAKwD,EACD,OAAO,eAAI3B,EAAX,GAAqBC,EAAO+B,WAEhC,QACI,OAAOhC,ICkBJmC,EAhCE,WAAO,IAAD,EAEUhC,mBAAiB,IAF3B,mBAEZT,EAFY,KAEL0C,EAFK,OAIajC,mBAAiB,IAJ9B,mBAIZE,EAJY,KAIFC,EAJE,OAMyBH,mBAAiB,IAN1C,mBAMZkC,EANY,KAMIC,EANJ,KAQb7B,EAAWC,cAajB,OACI,yBAAK/C,UAAWC,IAAO2E,UACnB,kBAAC,EAAD,CAAOpE,KAAM,OAAQC,YAAa,SAAUC,MAAOqB,EAAOlB,aAAc4D,IACxE,kBAAC,EAAD,CAAOjE,KAAM,WAAYC,YAAa,WAAYC,MAAOgC,EAAU7B,aAAc8B,IACjF,kBAAC,EAAD,CAAOnC,KAAM,WAAYC,YAAa,kBAAmBC,MAAOgE,EACzD7D,aAAc8D,IACrB,kBAAC,EAAD,CAAQxD,KAAM,WAAYD,YAjBX,WACfwB,IAAagC,GACb5B,EAASiB,EAAQ,CAAChC,QAAOW,cACzB+B,EAAY,IACZ9B,EAAY,IACZgC,EAAkB,KAElBL,MAAM,iH,iBCvBZlD,EAAWC,IAAMC,OAAO,CAC1BC,QAAS,kDASAsD,EAAgB,SACfC,GACN,OAAO1D,EAASM,KAAyB,UAAWoD,GAAenD,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SCRrFC,EAAe,CACjB4B,SAAS,EACTzB,MAAO,IAyCI8C,EApCe,WAAiG,IAAhG1C,EAA+F,uDAArEP,EAAcQ,EAAuD,uCAC1H,OAAQA,EAAO9B,MACX,IAZe,aAaX,OAAO,eAAI6B,EAAX,CAAkBqB,QAASpB,EAAOoB,UACtC,IAbU,YAcN,OAAO,eAAIrB,EAAX,CAAkBJ,MAAOK,EAAOL,QACpC,QACI,OAAOI,ICgBJ2C,EA3BQ,WAAO,IAAD,EACCxC,mBAAiB,IADlB,mBAClBT,EADkB,KACXkD,EADW,KAGnBnC,EAAWC,cACXd,EAAQe,aAAY,SAACC,GAAD,OAAyBA,EAAMiC,eAAejD,SAClEkD,EAAenC,aAAY,SAACC,GAAD,OAAyBA,EAAMiC,eAAexB,WAEzE0B,EAAYhC,uBACd,WACIN,EDciB,SAACf,GAAD,OAAmB,SAACe,GAM7C+B,EALoB,CAChB9C,QACAsD,MAAO,8DACPC,MAAO,wBAGN3D,MAAK,SAAAC,GACEA,EAAI8B,SACJZ,EAd8D,CAACtC,KAxBxD,aAwB8EkD,QAcvD9B,EAAI8B,aAGzCC,OAAM,SAAA/B,GACHkB,EAfuC,CAACtC,KA1BlC,YA0BmDyB,MAevCL,EAAIgC,SAAS/B,KAAKI,YC3B3BsD,CAAcxD,MACxB,CAACA,EAAOe,IAGf,OAAIqC,EAAqB,kBAAC,IAAD,CAAUtB,GAAI,sBAGnC,yBAAK7D,UAAWC,IAAOuF,WACnB,gDACA,kBAAC,EAAD,CAAO3E,aAAcoE,EAAUvE,MAAOqB,EAAOvB,KAAM,QAASC,YAAa,gBAErEwB,GAAS,0BAAMjC,UAAWC,IAAOgC,OAAQA,GAE7C,kBAAC,EAAD,CAAQd,KAAM,OAAQD,YAAakE,MCPhCK,EAXA,WACX,OACI,yBAAKzF,UAAWC,IAAOyF,QACnB,kBAAC,IAAD,CAAOC,KARS,WAQWC,OAAQ,kBAAM,kBAAC,EAAD,SACzC,kBAAC,IAAD,CAAOD,KARO,SAQWC,OAAQ,kBAAM,kBAAC,EAAD,SACvC,kBAAC,IAAD,CAAOD,KARU,YAQWC,OAAQ,kBAAM,kBAAC,EAAD,SAC1C,kBAAC,IAAD,CAAOD,KARiB,mBAQWC,OAAQ,kBAAM,kBAAC,EAAD,WCH9CC,EAXA,WACX,OACI,yBAAK7F,UAAWC,IAAO6F,QACnB,kBAAC,IAAD,CAASjC,GDAO,YCAhB,WACA,kBAAC,IAAD,CAASA,GDAK,UCAd,SACA,kBAAC,IAAD,CAASA,GDAQ,aCAjB,YACA,kBAAC,IAAD,CAASA,GDAe,oBCAxB,qBCGGkC,EATH,WACR,OACI,yBAAK/F,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGQgG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sBCjBAtE,GAAe,GAWNuE,GAPQ,WAA4E,IAA3EhE,EAA0E,uDAAhDP,GAAcQ,EAAkC,uCAI9F,OAHQA,EAAO9B,KAGR6B,GCFLiE,GAAcC,aAAgB,CAChCrG,QAASmG,GACTnD,MAAOd,EACPwC,SAAUL,EACVW,eAAgBH,IAQL9B,GAFDuD,aAAYF,GAAaG,aAAgBC,OCRvDC,IAASf,OACL,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAU3C,MAAOA,IACb,kBAAC,IAAM2D,WAAP,KACI,kBAAC,EAAD,SAIZC,SAASC,eAAe,SH0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtF,MAAK,SAAAuF,GACJA,EAAaC,gBAEdxD,OAAM,SAAA1B,GACLuB,QAAQvB,MAAMA,EAAMmF,c","file":"static/js/main.411817c9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__1NqhM\",\"rememberMe\":\"Login_rememberMe__1lr5L\",\"error\":\"Login_error__14-O5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ForgotPassword_container__26ACj\",\"error\":\"ForgotPassword_error__3xppo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3xS8R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__3k0ZH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputContainer\":\"Input_inputContainer__2rvjo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3zEY0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"register\":\"Register_register__2no2n\"};","import React from \"react\";\r\nimport Button from \"../../common/Button/Button\";\r\nimport Input from \"../../common/Input/Input\";\r\nimport styles from \"./Profile.module.css\"\r\n\r\nconst Profile = () => {\r\n    return (\r\n        <div className={styles.profile}>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\nimport styles from \"./Input.module.css\";\n\ntype InputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n    & {onChangeFunc: (value: string) => void };\n\nconst Input = React.memo((props: InputPropsType) => {\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n        props.onChangeFunc(e.currentTarget.value);\n    };\n\n    return (\n        <div className={styles.inputContainer}>\n            <input type={props.type} placeholder={props.placeholder} value={props.value} onChange={onChange}/>\n        </div>\n    );\n});\n\nexport default Input;","import React from \"react\";\r\nimport styles from \"./Button.module.css\"\r\n\r\ntype PropsType = {\r\n    name: string;\r\n    onClickFunc: () => void;\r\n};\r\n\r\nconst Button = (props: PropsType) => {\r\n    return (\r\n        <button className={styles.button} onClick={props.onClickFunc}>{props.name}</button>\r\n    )\r\n};\r\n\r\nexport default Button;","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://cards-nya-back.herokuapp.com/1.0/auth\"\r\n});\r\n\r\nexport type UserLoginType = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe: boolean;\r\n};\r\n\r\ntype UserDataResponse = {\r\n    email: string;\r\n    name: string;\r\n    isAdmin: boolean;\r\n    rememberMe: boolean;\r\n    token: string;\r\n    tokenDeathTime: number;\r\n    __v: number;\r\n    _id: string;\r\n    success: boolean;\r\n    error: string;\r\n};\r\n\r\nexport const loginApi = {\r\n    userLogin(userData: UserLoginType) {\r\n        return instance.post<UserDataResponse>(\"/login\", userData).then(res => res.data)\r\n    }\r\n};","import {loginApi, UserLoginType} from \"../dal/api-login\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst USER_LOGIN = \"USER-LOGIN\";\r\nconst SET_ERROR = \"SET-ERROR\";\r\nconst SET_IS_AUTH = \"SET-IS-AUTH\";\r\n\r\nconst initialState = {\r\n    email: \"\",\r\n    name: \"\",\r\n    token: \"\",\r\n    error: \"\",\r\n    isAuth: false\r\n};\r\n\r\ntype initialStateType = typeof initialState;\r\n\r\nconst loginReducer = (state: initialStateType = initialState, action: LoginActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case USER_LOGIN:\r\n            return {...state, ...action.userData};\r\n        case SET_ERROR:\r\n            return {...state, error: action.error};\r\n        case SET_IS_AUTH:\r\n            return {...state, isAuth: action.isAuth};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype LoginActionType = UserLoginSuccessType | SetErrorType | SetIsAuthType;\r\n\r\ntype UserDataType = {\r\n    email: string;\r\n    name: string;\r\n    token: string;\r\n}\r\ntype UserLoginSuccessType = { type: typeof USER_LOGIN; userData: UserDataType };\r\nconst userLoginSuccess = (userData: UserDataType): UserLoginSuccessType => ({type: USER_LOGIN, userData});\r\n\r\ntype SetErrorType = { type: typeof SET_ERROR; error: string };\r\nconst setError = (error: string): SetErrorType => ({type: SET_ERROR, error});\r\n\r\ntype SetIsAuthType = {type: typeof SET_IS_AUTH; isAuth: boolean};\r\nconst setIsAuth = (isAuth: boolean): SetIsAuthType => ({type: SET_IS_AUTH, isAuth});\r\n\r\nexport const userLogin = (userLoginData: UserLoginType) => (dispatch: Dispatch<LoginActionType>) => {\r\n    loginApi.userLogin(userLoginData)\r\n        .then(res => {\r\n            if (res.success) {\r\n                dispatch(userLoginSuccess({\r\n                    email: res.email,\r\n                    name: res.name,\r\n                    token: res.token\r\n                }));\r\n                dispatch(setIsAuth(true));\r\n            }\r\n        })\r\n        .catch(res => {\r\n            dispatch(setError(res.response.data.error));\r\n            dispatch(setIsAuth(false));\r\n        })\r\n};\r\n\r\nexport default loginReducer;","import React, {ChangeEvent, useCallback, useState} from \"react\";\r\nimport styles from \"./Login.module.css\"\r\nimport Input from \"../../common/Input/Input\";\r\nimport Button from \"../../common/Button/Button\";\r\nimport {userLogin} from \"../../../bll/login-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../bll/store\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst Login = () => {\r\n    const [email, setLogin] = useState<string>(\"\");\r\n    const [password, setPassword] = useState<string>(\"\");\r\n    const [rememberMe, setRememberMe] = useState<boolean>(false);\r\n\r\n    const dispatch = useDispatch();\r\n    const error = useSelector((store: AppStateType) => store.login.error);\r\n    const isAuth = useSelector((store: AppStateType) => store.login.isAuth);\r\n\r\n    const onRememberMeChange = useCallback(\r\n        (e: ChangeEvent<HTMLInputElement>) => {\r\n            setRememberMe(e.currentTarget.checked);\r\n        },\r\n        [setRememberMe]\r\n    );\r\n\r\n    const setData = useCallback(\r\n        () => {\r\n            console.log({email, password, rememberMe});\r\n            dispatch(userLogin({email, password, rememberMe}));\r\n        },\r\n        [email, password, rememberMe, dispatch]\r\n    );\r\n\r\n    if (isAuth) return <Redirect to={\"/profile\"}/>;\r\n\r\n    return (\r\n        <div className={styles.login}>\r\n            <div>Sign In</div>\r\n            <Input type={\"email\"} placeholder={\"Login\"} onChangeFunc={setLogin} value={email}/>\r\n            <Input type={\"password\"} placeholder={\"Password\"} onChangeFunc={setPassword} value={password}/>\r\n            {\r\n                error && <span className={styles.error}>{error}</span>\r\n            }\r\n            <div className={styles.rememberMe}>\r\n                <input type={\"checkbox\"} onChange={onRememberMeChange} checked={rememberMe}/>\r\n                <span>remember me</span>\r\n            </div>\r\n            <Button name={\"Login\"} onClickFunc={setData}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import axios from \"axios\";\r\n\r\nconst baseURL = `https://cards-nya-back.herokuapp.com/1.0/`;\r\nconst instance = axios.create({\r\n    baseURL: baseURL\r\n});\r\n\r\nexport type NewUserType = {\r\n    email: string;\r\n    password: string;\r\n}\r\n\r\ntype NewUserResponse = {\r\n    addedUser: {\r\n        email: string,\r\n        isAdmin: boolean,\r\n        __v: number,\r\n        _id: string\r\n    },\r\n    success: true\r\n}\r\n\r\nexport const apiRegister = {\r\n    addNewUser(NewUser: NewUserType) {\r\n        return instance.post<NewUserResponse>(`auth/register`, NewUser)\r\n    }\r\n};\r\n","import {Dispatch} from \"redux\";\r\nimport {apiRegister, NewUserType} from \"../dal/api-register\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst REGISTER = \"cards-nya/auth/REGISTER\";\r\n\r\nconst initialState = {\r\n    email: \"\",\r\n    isAdmin: false,\r\n    __v: 1,\r\n    _id: \"\"\r\n};\r\n\r\ntype initialStateType = typeof initialState;\r\ntype addNewUserType = { type: string; addedUser: initialStateType };\r\n\r\nconst registerReducer = (state: initialStateType = initialState, action: addNewUserType): initialStateType => {\r\n    switch (action.type) {\r\n        case REGISTER: {\r\n            return {...state, ...action.addedUser}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst addNewUser = (addedUser: initialStateType): addNewUserType => ({type: REGISTER, addedUser});\r\n\r\nexport const NewUser = (newUserData: NewUserType) => (dispatch: Dispatch<addNewUserType>) => {\r\n    apiRegister.addNewUser(newUserData)\r\n        .then(res => {\r\n            if (res.data.success === true) {\r\n                dispatch(addNewUser(res.data.addedUser))\r\n            } else {\r\n                alert(\"some error\")\r\n            }\r\n        })\r\n        .catch(res => {\r\n            alert(\"error\")\r\n        })\r\n};\r\nexport default registerReducer;","import React, {useState} from \"react\";\r\nimport styles from \"./Register.module.css\"\r\nimport Input from \"../../common/Input/Input\";\r\nimport Button from \"../../common/Button/Button\";\r\nimport {NewUser} from \"../../../bll/register-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\nconst Register = () => {\r\n\r\n    const [email, setNewEmail] = useState<string>(\"\");\r\n\r\n    const [password, setPassword] = useState<string>(\"\");\r\n\r\n    const [repeatPassword, setRepeatPassword] = useState<string>(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const setNewUserData = (): void => {\r\n        if (password === repeatPassword) {\r\n            dispatch(NewUser({email, password}));\r\n            setNewEmail(\"\");\r\n            setPassword(\"\");\r\n            setRepeatPassword(\"\")\r\n        } else {\r\n            alert(\"Пароли не совпадают\")\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={styles.register}>\r\n            <Input type={\"text\"} placeholder={\"e-mail\"} value={email} onChangeFunc={setNewEmail}/>\r\n            <Input type={\"password\"} placeholder={\"Password\"} value={password} onChangeFunc={setPassword}/>\r\n            <Input type={\"password\"} placeholder={\"Repeat password\"} value={repeatPassword}\r\n                   onChangeFunc={setRepeatPassword}/>\r\n            <Button name={\"Register\"} onClickFunc={setNewUserData}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://cards-nya-back.herokuapp.com/1.0/auth\"\r\n});\r\n\r\nexport type ResetPassType = {\r\n    email: string;\r\n    html1: string;\r\n    html2: string;\r\n};\r\n\r\nexport const forgotPassApi = {\r\n    resetPass(resetPassData: ResetPassType) {\r\n        return instance.post<{success: boolean}>(\"/forgot\", resetPassData).then(res => res.data)\r\n    }\r\n};","import {Dispatch} from \"redux\";\r\nimport {forgotPassApi} from \"../dal/api-forgot-password\";\r\n\r\nconst RESET_PASSWORD = \"USER-LOGIN\";\r\nconst SET_ERROR = \"SET-ERROR\";\r\n\r\nconst initialState = {\r\n    success: false,\r\n    error: \"\"\r\n};\r\n\r\ntype initialStateType = typeof initialState;\r\n\r\nconst forgotPasswordReducer = (state: initialStateType = initialState, action: ForgotPasswordActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case RESET_PASSWORD:\r\n            return {...state, success: action.success};\r\n        case SET_ERROR:\r\n            return {...state, error: action.error};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype ForgotPasswordActionType = ResetPasswordSuccessType | SetErrorType;\r\n\r\ntype ResetPasswordSuccessType = { type: typeof RESET_PASSWORD; success: boolean };\r\nconst resetPasswordSuccess = (success: boolean): ResetPasswordSuccessType => ({type: RESET_PASSWORD, success});\r\n\r\ntype SetErrorType = { type: typeof SET_ERROR; error: string };\r\nconst setError = (error: string): SetErrorType => ({type: SET_ERROR, error});\r\n\r\nexport const resetPassword = (email: string) => (dispatch: Dispatch<ForgotPasswordActionType>) => {\r\n    const resPassData = {\r\n        email,\r\n        html1: \"<a href='http://localhost:3000/cards-nya#/forgot-password/'\",\r\n        html2: \">reset-password</a>\"\r\n    };\r\n    forgotPassApi.resetPass(resPassData)\r\n        .then(res => {\r\n            if (res.success) {\r\n                dispatch(resetPasswordSuccess(res.success));\r\n            }\r\n        })\r\n        .catch(res => {\r\n            dispatch(setError(res.response.data.error));\r\n        })\r\n};\r\n\r\nexport default forgotPasswordReducer;","import React, {useCallback, useState} from \"react\";\r\nimport styles from \"./ForgotPassword.module.css\"\r\nimport Input from \"../../common/Input/Input\";\r\nimport Button from \"../../common/Button/Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {resetPassword} from \"../../../bll/forgot-password-reducer\";\r\nimport {AppStateType} from \"../../../bll/store\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst ForgotPassword = () => {\r\n    const [email, setEmail] = useState<string>(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n    const error = useSelector((store: AppStateType) => store.forgotPassword.error);\r\n    const resetSuccess = useSelector((store: AppStateType) => store.forgotPassword.success);\r\n\r\n    const resetPass = useCallback(\r\n        () => {\r\n            dispatch(resetPassword(email))\r\n        }, [email, dispatch]\r\n    );\r\n\r\n    if (resetSuccess) return <Redirect to={\"/set-new-password\"}/>;\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div>Forgot Password</div>\r\n            <Input onChangeFunc={setEmail} value={email} type={\"email\"} placeholder={\"your e-mail\"}/>\r\n            {\r\n                error && <span className={styles.error}>{error}</span>\r\n            }\r\n            <Button name={\"Send\"} onClickFunc={resetPass}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ForgotPassword;\r\n","import React from \"react\";\r\nimport {Route} from \"react-router-dom\";\r\nimport styles from \"./Routes.module.css\"\r\nimport Profile from \"../Profile/Profile\";\r\nimport Login from \"../Login/Login\";\r\nimport Register from \"../Register/Register\";\r\nimport ForgotPassword from \"../ForgotPassword/ForgotPassword\";\r\n\r\nexport const PROFILE_PATH = \"/profile\";\r\nexport const LOGIN_PATH = \"/login\";\r\nexport const REGISTER_PATH = \"/register\";\r\nexport const FORGOT_PASSWORD_PATH = \"/forgot-password\";\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <div className={styles.routes}>\r\n            <Route path={PROFILE_PATH} render={() => <Profile/>}/>\r\n            <Route path={LOGIN_PATH} render={() => <Login/>}/>\r\n            <Route path={REGISTER_PATH} render={() => <Register/>}/>\r\n            <Route path={FORGOT_PASSWORD_PATH} render={() => <ForgotPassword/>}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport styles from \"./Header.module.css\"\r\nimport {FORGOT_PASSWORD_PATH, LOGIN_PATH, PROFILE_PATH, REGISTER_PATH} from \"../Routes/Routes\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className={styles.header}>\r\n            <NavLink to={PROFILE_PATH}>Profile</NavLink>\r\n            <NavLink to={LOGIN_PATH}>Login</NavLink>\r\n            <NavLink to={REGISTER_PATH}>Register</NavLink>\r\n            <NavLink to={FORGOT_PASSWORD_PATH}>Forgot Password</NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./main-components/Header/Header\";\nimport Routes from \"./main-components/Routes/Routes\";\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <Header/>\n            <Routes/>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nconst initialState = {};\r\n\r\ntype initialStateType = typeof initialState;\r\n\r\nconst profileReducer = (state: initialStateType = initialState, action: any): initialStateType => {\r\n    switch (action.type) {\r\n\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default profileReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport loginReducer from \"./login-reducer\";\r\nimport registerReducer from \"./register-reducer\";\r\nimport forgotPasswordReducer from \"./forgot-password-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    profile: profileReducer,\r\n    login: loginReducer,\r\n    register: registerReducer,\r\n    forgotPassword: forgotPasswordReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './main/ui/App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport { Provider } from 'react-redux';\nimport store from './main/bll/store';\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <React.StrictMode>\n                <App/>\n            </React.StrictMode>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}